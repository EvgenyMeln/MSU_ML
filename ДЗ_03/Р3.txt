import numpy as np

class KNN_classifier:
    def __init__(self, n_neighbors: int):
        self.K = n_neighbors
        self.X_train = None
        self.y_train = None

    def fit(self, x: np.array, y: np.array):
        """
        Запоминаем обучающие данные (x - признаки, y - метки классов)
        """
        self.X_train = x
        self.y_train = y

    def _euclidean_distance(self, x1, x2):
        """
        Вычисление Евклидова расстояния между двумя объектами x1 и x2
        """
        return np.sqrt(np.sum((x1 - x2) ** 2))

    def predict(self, x: np.array):
        """
        Предсказание класса для входных объектов x
        """
        predictions = []
        
        for x_test in x:
            # Вычисляем расстояние от x_test до всех точек обучающей выборки
            distances = [self._euclidean_distance(x_test, x_train) for x_train in self.X_train]
            
            # Находим K ближайших соседей
            k_neighbors_indices = np.argsort(distances)[:self.K]
            k_neighbors_labels = self.y_train[k_neighbors_indices]
            
            # Определяем наиболее встречающийся класс среди соседей
            unique_labels, counts = np.unique(k_neighbors_labels, return_counts=True)
            predicted_label = unique_labels[np.argmax(counts)]
            
            predictions.append(predicted_label)
        
        return np.array(predictions)